# Loro

> Loro is a high-performance CRDT (Conflict-free Replicated Data Type) library designed for real-time collaboration and local-first software. It enables seamless synchronization of data across multiple devices and users, even in offline or peer-to-peer environments.

Loro provides a robust framework for building collaborative applications with features like version control, time travel, and rich text editing. It's implemented in Rust with bindings for JavaScript/WASM, Swift, and Python.

## Documentation

- [Introduction to Loro](https://loro.dev/docs): A comprehensive overview of Loro and its core concepts
- [Getting Started Guide](https://loro.dev/docs/tutorial/get_started): Step-by-step instructions for integrating Loro into your application
- [Concepts](https://loro.dev/docs/concepts/crdt): Learn about CRDTs and the theory behind Loro
- [Performance Benchmarks](https://loro.dev/docs/performance): Comparison of Loro's performance with other CRDT libraries

## Tutorials

- [Text Editing](https://loro.dev/docs/tutorial/text): How to use Loro's rich text CRDT capabilities
- [List and Movable List](https://loro.dev/docs/tutorial/list): Working with ordered collections in Loro
- [Map](https://loro.dev/docs/tutorial/map): Key-value pair management with conflict resolution
- [Tree](https://loro.dev/docs/tutorial/tree): Hierarchical data structures with Loro's movable tree CRDT
- [Time Travel](https://loro.dev/docs/tutorial/time_travel): Implementing version control and history navigation
- [Sync](https://loro.dev/docs/tutorial/sync): Guide to synchronizing data between instances
- [Tips](https://loro.dev/docs/tutorial/tips): Tips and tricks for using Loro

## Advanced Topics

- [Version Deep Dive](https://loro.dev/docs/advanced/version_deep_dive): Detailed explanation of Loro's versioning system
- [Event Graph Walker](https://loro.dev/docs/advanced/event_graph_walker): The Eg-Walker algorithm that powers Loro
- [Shallow Snapshot](https://loro.dev/docs/advanced/shallow_snapshot): Optimizing storage and transfer of document history
- [Undo/Redo](https://loro.dev/docs/advanced/undo): Implementing undo/redo functionality in collaborative environments

## Blog

- [Loro's Rich Text CRDT](https://loro.dev/blog/loro-richtext): Detailed explanation of Loro's rich text implementation
- [Movable Tree](https://loro.dev/blog/movable-tree): Deep dive into the movable tree CRDT algorithm
- [Loro Now Open Source](https://loro.dev/blog/loro-now-open-source): Announcement of Loro becoming open source
- [CRDT RichText](https://loro.dev/blog/crdt-richtext): Implementation of Peritext and Fugue algorithms

## Optional

- [CRDT Comparison](https://loro.dev/docs/index): Comparison of Loro with other CRDT libraries like Diamond-types, Yjs, and Automerge
- [When Not to Use CRDTs](https://loro.dev/docs/concepts/when_not_crdt): Understanding the limitations of CRDTs
- [API Reference](https://loro.dev/docs/tutorial/loro_doc): Detailed API documentation for Loro
- [About](https://loro.dev/about): Information about the creators of Loro
