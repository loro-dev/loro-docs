# Loro

> Loro is a high-performance CRDT library for building real-time collaborative applications. It enables automatic conflict resolution when multiple users edit simultaneously, supporting offline editing and peer-to-peer synchronization.

Loro provides JSON-compatible data structures with built-in version control, time travel, and rich text editing. Available for Rust, JavaScript/WASM, Swift, and Python.

## Core Features

- **Automatic Conflict Resolution**: All concurrent edits converge to the same state using CRDTs
- **Data Types**: Map, List, MovableList, Text (rich/plain), Tree, Counter
- **Version Control**: Git-like checkout, fork, and merge operations
- **Time Travel**: Navigate to any point in document history
- **Rich Text**: Full support for overlapping styles and editor bindings (Quill, ProseMirror, CodeMirror)
- **Performance**: 10-100x faster import than v0.x, handles 25M+ operations efficiently

## Documentation

- [Getting Started](https://loro.dev/docs/tutorial/get_started): Quick integration guide with code examples
- [Core Concepts](https://loro.dev/docs/concepts/crdt): Understanding CRDTs and Loro's architecture
- [Container Types](https://loro.dev/docs/concepts/container): Map, List, Text, Tree, and Counter containers
- [Performance](https://loro.dev/docs/performance): Benchmarks comparing Loro with Yjs and Automerge

## Tutorials

- [LoroDoc](https://loro.dev/docs/tutorial/loro_doc): Main API entry point and document management
- [Text Editing](https://loro.dev/docs/tutorial/text): Plain and rich text with editor integration
- [Lists](https://loro.dev/docs/tutorial/list): List vs MovableList for different use cases
- [Maps](https://loro.dev/docs/tutorial/map): Key-value stores with Last-Write-Wins semantics
- [Trees](https://loro.dev/docs/tutorial/tree): Hierarchical structures with move operations
- [Synchronization](https://loro.dev/docs/tutorial/sync): Syncing documents between peers
- [Time Travel](https://loro.dev/docs/tutorial/time_travel): Implementing history navigation
- [Persistence](https://loro.dev/docs/tutorial/persistence): Efficient saving and loading strategies

## Advanced Topics

- [Version Vectors & Frontiers](https://loro.dev/docs/advanced/version_deep_dive): Loro's versioning system
- [Shallow Snapshots](https://loro.dev/docs/concepts/shallow_snapshots): Privacy-compliant history removal
- [Undo/Redo](https://loro.dev/docs/advanced/undo): Local undo in collaborative environments
- [Import Status](https://loro.dev/docs/concepts/import_status): Handling out-of-order updates
- [Attached/Detached States](https://loro.dev/docs/concepts/attached_detached): Container and document states

## Blog

- [Loro v1.0 Release](https://loro.dev/blog/v1.0): Major performance improvements and stable format
- [Rich Text CRDT](https://loro.dev/blog/loro-richtext): Novel algorithm for rich text collaboration
- [Movable Tree](https://loro.dev/blog/movable-tree): Handling complex tree operations with cycle detection
- [Open Source Announcement](https://loro.dev/blog/loro-now-open-source): Loro's journey to open source

## Optional

- [When Not to Use CRDTs](https://loro.dev/docs/concepts/when_not_crdt): Understanding CRDT limitations
- [Choosing CRDT Types](https://loro.dev/docs/concepts/choose_crdt_type): Selecting the right container
- [Event Graph Walker](https://loro.dev/docs/concepts/event_graph_walker): Algorithm powering Loro
- [API Examples](https://loro.dev/docs/examples): Integration libraries and code samples
- [Inspector Tool](https://inspector.loro.dev): Visual debugging for Loro documents
- [About](https://loro.dev/about): Created by Zixuan Chen and Leon Zhao
