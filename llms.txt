# Loro Documentation Summary

## What is Loro?

Loro is a high-performance CRDT (Conflict-free Replicated Data Type) library for building real-time collaborative and local-first applications. It automatically resolves conflicts when multiple users edit the same data simultaneously, enabling seamless offline editing and peer-to-peer synchronization without requiring a central server.

## Core Features

### Data Types
- **LoroMap**: Key-value map with Last-Write-Wins conflict resolution
- **LoroList**: Ordered list supporting concurrent insertions/deletions
- **LoroMovableList**: Advanced list supporting Set and Move operations without duplication
- **LoroText**: Rich text container supporting plain and formatted text with editor bindings
- **LoroTree**: Hierarchical tree structure with movable nodes and sibling ordering
- **LoroCounter**: Distributed counter that sums all increments/decrements

### Key Capabilities
- **Automatic Conflict Resolution**: CRDTs ensure all peers converge to the same state
- **JSON Compatibility**: Any JSON-like data structure can be modeled
- **Time Travel**: Checkout and view any historical version of the document
- **Version Control**: Git-like operations including fork, branch, merge
- **Shallow Snapshots**: Privacy-compliant history removal (70-90% size reduction)
- **Rich Text Editing**: Full support for overlapping styles, comments, and annotations
- **Undo/Redo**: Local undo that preserves other users' edits
- **Cursor Stability**: Cursors maintain position through concurrent edits
- **Event System**: Subscribe to document changes with batched events

## Architecture

### Core Components
1. **LoroDoc**: Main entry point managing containers, versions, and synchronization
2. **OpLog**: Append-only operation history forming a DAG structure
3. **DocState**: Materialized current view of the document
4. **Containers**: Building blocks for organizing collaborative data

### Key Concepts
- **PeerID**: Unique 64-bit identifier for each editing peer
- **Version Vectors**: Complete peer state tracking for synchronization
- **Frontiers**: Compact version representation (1-2 elements typically)
- **Attached/Detached States**: Controls version sync and container membership
- **Transactions**: Operation bundling for event emission control

## Performance

### Benchmarks (v1.0)
- Import speed: 10-100x faster than previous versions
- Handles 25+ million operations on 10+ million character documents
- Real-world dataset (259,778 ops): ~2.3 seconds processing time
- Bundle size: ~894KB gzipped (includes full CRDT features)

### Optimizations
- Event Graph Walker algorithm for simple indices instead of complex metadata
- Run Length Encoding for memory efficiency
- Lazy loading with LSM-tree inspired block storage
- Batch import for reduced overhead

## Use Cases

### Ideal For
✅ Collaborative document editing (Google Docs-like)
✅ Real-time multiplayer applications
✅ Offline-first mobile/desktop apps
✅ Distributed systems without central coordination
✅ Applications requiring complete edit history
✅ Peer-to-peer synchronization scenarios

### Not Suitable For
❌ Applications requiring hard invariants (e.g., balance ≥ 0)
❌ Exclusive resource management (booking systems)
❌ ACID transaction requirements
❌ Large binary/media streaming
❌ Bundle-size sensitive applications

## Getting Started

### Installation
```javascript
// NPM/JavaScript
npm install loro-crdt

// Rust
[dependencies]
loro = "1.5"

// Swift Package Manager
.package(url: "https://github.com/loro-dev/loro-swift", from: "1.5.0")
```

### Basic Usage
```javascript
import { LoroDoc } from "loro-crdt";

// Create document
const doc = new LoroDoc();

// Get containers
const text = doc.getText("content");
const map = doc.getMap("metadata");

// Make changes
text.insert(0, "Hello World");
map.set("author", "Alice");

// Synchronize
const updates = doc.export({ mode: "update" });
otherDoc.import(updates);
```

## Advanced Features

### Version Control
- **Checkout**: View any historical version
- **Fork**: Create branches at specific versions
- **Shallow Snapshots**: Remove old history for privacy/storage
- **Time Travel**: Navigate through document history

### Collaboration
- **UndoManager**: Local undo/redo with cursor preservation
- **EphemeralStore**: Temporary state for presence/cursors
- **Batch Import**: Efficient multi-update processing
- **Event Subscriptions**: React to document changes

### Rich Text
- **Peritext + Fugue**: Advanced rich text algorithms
- **Editor Bindings**: ProseMirror, CodeMirror, Quill support
- **Overlapping Styles**: Multiple comments/annotations
- **Expand Behaviors**: Control style boundary behavior

## Recent Updates (v1.5.0)

- **PreCommit Hooks**: Modify commits before processing
- **EphemeralStore**: Alternative to Awareness for ephemeral state
- **Multi-threading**: Support for Rust and Swift
- **Peer Tracking**: First commit identification
- **Inspector Tool**: Visual debugging at inspector.loro.dev

## Integration Ecosystem

### Editor Integrations
- **loro-prosemirror**: ProseMirror/Tiptap integration
- **loro-codemirror**: CodeMirror 6 integration
- **Quill**: Native binding support

### Tools
- **Loro Inspector**: Browser-based document visualization
- **CLI Import**: Repository history import tool

## Technical Innovation

### Algorithms
- **Event Graph Walker (Eg-Walker)**: Efficient CRDT with simple indices
- **Fugue**: Minimizes text editing anomalies
- **Movable Tree**: Handles complex tree operations with cycle detection
- **Style Anchors**: Novel rich text implementation

### Design Principles
- Separation of OpLog and DocState for flexibility
- Deterministic container IDs based on context
- Monotonic merging without rejection
- Memory-efficient relay servers (OpLog only)

## Resources

- Documentation: https://loro.dev
- GitHub: https://github.com/loro-dev/loro
- Inspector: https://inspector.loro.dev
- Examples: https://github.com/loro-dev/loro-examples-deno
- Blog: https://loro.dev/blog

## Summary

Loro is a production-ready CRDT library that makes building collaborative applications straightforward. It combines theoretical rigor with practical performance, offering features like time travel, version control, and rich text editing while maintaining excellent performance characteristics. The library is particularly suited for applications requiring real-time collaboration, offline editing, and automatic conflict resolution in distributed environments.